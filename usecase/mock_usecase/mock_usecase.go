// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SlashNephy/amq-cache-server/usecase/media (interfaces: MediaUsecase)
//
// Generated by this command:
//
//	mockgen -typed -package mock_usecase -destination ./mock_usecase/mock_usecase.go github.com/SlashNephy/amq-cache-server/usecase/media MediaUsecase
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMediaUsecase is a mock of MediaUsecase interface.
type MockMediaUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMediaUsecaseMockRecorder
}

// MockMediaUsecaseMockRecorder is the mock recorder for MockMediaUsecase.
type MockMediaUsecaseMockRecorder struct {
	mock *MockMediaUsecase
}

// NewMockMediaUsecase creates a new mock instance.
func NewMockMediaUsecase(ctrl *gomock.Controller) *MockMediaUsecase {
	mock := &MockMediaUsecase{ctrl: ctrl}
	mock.recorder = &MockMediaUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaUsecase) EXPECT() *MockMediaUsecaseMockRecorder {
	return m.recorder
}

// DownloadMedia mocks base method.
func (m *MockMediaUsecase) DownloadMedia(arg0 context.Context, arg1 string, arg2 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadMedia", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadMedia indicates an expected call of DownloadMedia.
func (mr *MockMediaUsecaseMockRecorder) DownloadMedia(arg0, arg1, arg2 any) *MediaUsecaseDownloadMediaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMedia", reflect.TypeOf((*MockMediaUsecase)(nil).DownloadMedia), arg0, arg1, arg2)
	return &MediaUsecaseDownloadMediaCall{Call: call}
}

// MediaUsecaseDownloadMediaCall wrap *gomock.Call
type MediaUsecaseDownloadMediaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MediaUsecaseDownloadMediaCall) Return(arg0 error) *MediaUsecaseDownloadMediaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MediaUsecaseDownloadMediaCall) Do(f func(context.Context, string, io.Writer) error) *MediaUsecaseDownloadMediaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MediaUsecaseDownloadMediaCall) DoAndReturn(f func(context.Context, string, io.Writer) error) *MediaUsecaseDownloadMediaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindCachedMediaPath mocks base method.
func (m *MockMediaUsecase) FindCachedMediaPath(arg0 context.Context, arg1 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCachedMediaPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindCachedMediaPath indicates an expected call of FindCachedMediaPath.
func (mr *MockMediaUsecaseMockRecorder) FindCachedMediaPath(arg0, arg1 any) *MediaUsecaseFindCachedMediaPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCachedMediaPath", reflect.TypeOf((*MockMediaUsecase)(nil).FindCachedMediaPath), arg0, arg1)
	return &MediaUsecaseFindCachedMediaPathCall{Call: call}
}

// MediaUsecaseFindCachedMediaPathCall wrap *gomock.Call
type MediaUsecaseFindCachedMediaPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MediaUsecaseFindCachedMediaPathCall) Return(arg0 string, arg1 bool) *MediaUsecaseFindCachedMediaPathCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MediaUsecaseFindCachedMediaPathCall) Do(f func(context.Context, string) (string, bool)) *MediaUsecaseFindCachedMediaPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MediaUsecaseFindCachedMediaPathCall) DoAndReturn(f func(context.Context, string) (string, bool)) *MediaUsecaseFindCachedMediaPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
